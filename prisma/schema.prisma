datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Attendee {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  allowedEvents AllowedEvents[]

  attendanceAnswers AttendanceAnswers[]

  partyMembers               Attendee[] @relation("partyMembers", references: [id])
  // This has to be here to differentiate:
  // https://stackoverflow.com/questions/65162657/one-to-many-self-relation-in-prisma-schema
  // and
  // https://www.prisma.io/docs/concepts/components/prisma-schema/relations/self-relations#many-to-many-self-relations
  partyMembersThatIncludedMe Attendee[] @relation("partyMembers", references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AttendanceAnswers {
  id          Int        @id @default(autoincrement())
  ceremony    Ceremony?  @relation(fields: [ceremonyId], references: [id])
  ceremonyId  Int?
  reception   Reception? @relation(fields: [receptionId], references: [id])
  receptionId Int?

  Attendee   Attendee @relation(fields: [attendeeId], references: [id])
  attendeeId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Ceremony {
  id                Int                 @id @default(autoincrement())
  AttendanceAnswers AttendanceAnswers[]
  willAttend        Boolean
  whereSeated       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reception {
  id                  Int                 @id @default(autoincrement())
  AttendanceAnswers   AttendanceAnswers[]
  willAttend          Boolean
  dietaryRestrictions String?
  anythingElse        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum AllowedEvents {
  CEREMONY
  RECEPTION
}
