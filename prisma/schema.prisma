datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Attendee {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  allowedEvents AllowedEvents[]

  attendanceAnswer AttendanceAnswer?

  partyMembers               Attendee[] @relation("partyMembers", references: [id])
  // This has to be here to differentiate:
  // https://stackoverflow.com/questions/65162657/one-to-many-self-relation-in-prisma-schema
  // and
  // https://www.prisma.io/docs/concepts/components/prisma-schema/relations/self-relations#many-to-many-self-relations
  partyMembersThatIncludedMe Attendee[] @relation("partyMembers", references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AttendanceAnswer {
  id        Int        @id @default(autoincrement())
  ceremony  Ceremony?  @relation()
  reception Reception? @relation()

  Attendee   Attendee @relation(fields: [attendeeId], references: [id])
  attendeeId Int      @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Ceremony {
  id                 Int              @id @default(autoincrement())
  AttendanceAnswer   AttendanceAnswer @relation(fields: [attendanceAnswerId], references: [id])
  attendanceAnswerId Int              @unique
  willAttend         Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reception {
  id                        Int              @id @default(autoincrement())
  AttendanceAnswer          AttendanceAnswer @relation(fields: [attendanceAnswerId], references: [id])
  attendanceAnswerId        Int              @unique
  willAttend                Boolean
  dietaryRestrictions       String?
  tuneThatWillMakeYouBoogie String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum AllowedEvents {
  CEREMONY
  RECEPTION
}
